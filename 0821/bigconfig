@triton.autotune(
    configs=[
        # ==================== 小方阵配置 (256-512) ====================
        # 不同BLOCK_SIZE组合
        triton.Config({'BLOCK_SIZE_M':32,'BLOCK_SIZE_N':32,'BLOCK_SIZE_K':32,'GROUP_SIZE_M':4},num_stages=3,num_warps=2),
        triton.Config({'BLOCK_SIZE_M':32,'BLOCK_SIZE_N':32,'BLOCK_SIZE_K':32,'GROUP_SIZE_M':8},num_stages=3,num_warps=2),
        triton.Config({'BLOCK_SIZE_M':32,'BLOCK_SIZE_N':64,'BLOCK_SIZE_K':32,'GROUP_SIZE_M':4},num_stages=3,num_warps=2),
        triton.Config({'BLOCK_SIZE_M':64,'BLOCK_SIZE_N':32,'BLOCK_SIZE_K':32,'GROUP_SIZE_M':4},num_stages=3,num_warps=2),
        triton.Config({'BLOCK_SIZE_M':64,'BLOCK_SIZE_N':64,'BLOCK_SIZE_K':32,'GROUP_SIZE_M':4},num_stages=3,num_warps=4),
        triton.Config({'BLOCK_SIZE_M':64,'BLOCK_SIZE_N':64,'BLOCK_SIZE_K':64,'GROUP_SIZE_M':4},num_stages=3,num_warps=4),
        triton.Config({'BLOCK_SIZE_M':128,'BLOCK_SIZE_N':128,'BLOCK_SIZE_K':32,'GROUP_SIZE_M':4},num_stages=3,num_warps=4),
        triton.Config({'BLOCK_SIZE_M':128,'BLOCK_SIZE_N':128,'BLOCK_SIZE_K':64,'GROUP_SIZE_M':4},num_stages=3,num_warps=8),
        
        # 不同GROUP_SIZE_M
        triton.Config({'BLOCK_SIZE_M':64,'BLOCK_SIZE_N':64,'BLOCK_SIZE_K':32,'GROUP_SIZE_M':1},num_stages=3,num_warps=4),
        triton.Config({'BLOCK_SIZE_M':64,'BLOCK_SIZE_N':64,'BLOCK_SIZE_K':32,'GROUP_SIZE_M':2},num_stages=3,num_warps=4),
        triton.Config({'BLOCK_SIZE_M':64,'BLOCK_SIZE_N':64,'BLOCK_SIZE_K':32,'GROUP_SIZE_M':4},num_stages=3,num_warps=4),
        triton.Config({'BLOCK_SIZE_M':64,'BLOCK_SIZE_N':64,'BLOCK_SIZE_K':32,'GROUP_SIZE_M':8},num_stages=3,num_warps=4),
        triton.Config({'BLOCK_SIZE_M':64,'BLOCK_SIZE_N':64,'BLOCK_SIZE_K':32,'GROUP_SIZE_M':16},num_stages=3,num_warps=4),
        
        # 不同阶段数
        triton.Config({'BLOCK_SIZE_M':64,'BLOCK_SIZE_N':64,'BLOCK_SIZE_K':32,'GROUP_SIZE_M':8},num_stages=2,num_warps=4),
        triton.Config({'BLOCK_SIZE_M':64,'BLOCK_SIZE_N':64,'BLOCK_SIZE_K':32,'GROUP_SIZE_M':8},num_stages=3,num_warps=4),
        triton.Config({'BLOCK_SIZE_M':64,'BLOCK_SIZE_N':64,'BLOCK_SIZE_K':32,'GROUP_SIZE_M':8},num_stages=4,num_warps=4),
        triton.Config({'BLOCK_SIZE_M':64,'BLOCK_SIZE_N':64,'BLOCK_SIZE_K':32,'GROUP_SIZE_M':8},num_stages=5,num_warps=4),
        
        # 不同warp数
        triton.Config({'BLOCK_SIZE_M':64,'BLOCK_SIZE_N':64,'BLOCK_SIZE_K':32,'GROUP_SIZE_M':8},num_stages=3,num_warps=2),
        triton.Config({'BLOCK_SIZE_M':64,'BLOCK_SIZE_N':64,'BLOCK_SIZE_K':32,'GROUP_SIZE_M':8},num_stages=3,num_warps=4),
        triton.Config({'BLOCK_SIZE_M':64,'BLOCK_SIZE_N':64,'BLOCK_SIZE_K':32,'GROUP_SIZE_M':8},num_stages=3,num_warps=8),
        
        # ==================== 中等方阵配置 (512-1024) ====================
        # 不同BLOCK_SIZE组合
        triton.Config({'BLOCK_SIZE_M':64,'BLOCK_SIZE_N':64,'BLOCK_SIZE_K':64,'GROUP_SIZE_M':8},num_stages=3,num_warps=4),
        triton.Config({'BLOCK_SIZE_M':128,'BLOCK_SIZE_N':128,'BLOCK_SIZE_K':32,'GROUP_SIZE_M':8},num_stages=3,num_warps=4),
        triton.Config({'BLOCK_SIZE_M':128,'BLOCK_SIZE_N':128,'BLOCK_SIZE_K':64,'GROUP_SIZE_M':8},num_stages=3,num_warps=8),
        triton.Config({'BLOCK_SIZE_M':128,'BLOCK_SIZE_N':128,'BLOCK_SIZE_K':128,'GROUP_SIZE_M':8},num_stages=3,num_warps=8),
        triton.Config({'BLOCK_SIZE_M':256,'BLOCK_SIZE_N':256,'BLOCK_SIZE_K':32,'GROUP_SIZE_M':8},num_stages=3,num_warps=8),
        triton.Config({'BLOCK_SIZE_M':256,'BLOCK_SIZE_N':256,'BLOCK_SIZE_K':64,'GROUP_SIZE_M':8},num_stages=3,num_warps=8),
        triton.Config({'BLOCK_SIZE_M':256,'BLOCK_SIZE_N':256,'BLOCK_SIZE_K':128,'GROUP_SIZE_M':8},num_stages=3,num_warps=8),
        
        # 非对称配置
        triton.Config({'BLOCK_SIZE_M':128,'BLOCK_SIZE_N':256,'BLOCK_SIZE_K':64,'GROUP_SIZE_M':8},num_stages=3,num_warps=8),
        triton.Config({'BLOCK_SIZE_M':256,'BLOCK_SIZE_N':128,'BLOCK_SIZE_K':64,'GROUP_SIZE_M':8},num_stages=3,num_warps=8),
        
        # 不同GROUP_SIZE_M
        triton.Config({'BLOCK_SIZE_M':128,'BLOCK_SIZE_N':128,'BLOCK_SIZE_K':64,'GROUP_SIZE_M':1},num_stages=3,num_warps=8),
        triton.Config({'BLOCK_SIZE_M':128,'BLOCK_SIZE_N':128,'BLOCK_SIZE_K':64,'GROUP_SIZE_M':2},num_stages=3,num_warps=8),
        triton.Config({'BLOCK_SIZE_M':128,'BLOCK_SIZE_N':128,'BLOCK_SIZE_K':64,'GROUP_SIZE_M':4},num_stages=3,num_warps=8),
        triton.Config({'BLOCK_SIZE_M':128,'BLOCK_SIZE_N':128,'BLOCK_SIZE_K':64,'GROUP_SIZE_M':8},num_stages=3,num_warps=8),
        triton.Config({'BLOCK_SIZE_M':128,'BLOCK_SIZE_N':128,'BLOCK_SIZE_K':64,'GROUP_SIZE_M':16},num_stages=3,num_warps=8),
        
        # 不同阶段数
        triton.Config({'BLOCK_SIZE_M':128,'BLOCK_SIZE_N':128,'BLOCK_SIZE_K':64,'GROUP_SIZE_M':8},num_stages=2,num_warps=8),
        triton.Config({'BLOCK_SIZE_M':128,'BLOCK_SIZE_N':128,'BLOCK_SIZE_K':64,'GROUP_SIZE_M':8},num_stages=3,num_warps=8),
        triton.Config({'BLOCK_SIZE_M':128,'BLOCK_SIZE_N':128,'BLOCK_SIZE_K':64,'GROUP_SIZE_M':8},num_stages=4,num_warps=8),
        triton.Config({'BLOCK_SIZE_M':128,'BLOCK_SIZE_N':128,'BLOCK_SIZE_K':64,'GROUP_SIZE_M':8},num_stages=5,num_warps=8),
        
        # 不同warp数
        triton.Config({'BLOCK_SIZE_M':128,'BLOCK_SIZE_N':128,'BLOCK_SIZE_K':64,'GROUP_SIZE_M':8},num_stages=3,num_warps=4),
        triton.Config({'BLOCK_SIZE_M':128,'BLOCK_SIZE_N':128,'BLOCK_SIZE_K':64,'GROUP_SIZE_M':8},num_stages=3,num_warps=8),
        triton.Config({'BLOCK_SIZE_M':128,'BLOCK_SIZE_N':128,'BLOCK_SIZE_K':64,'GROUP_SIZE_M':8},num_stages=3,num_warps=16),
        
        # ==================== 大方阵配置 (1024-2048) ====================
        # 不同BLOCK_SIZE组合
        triton.Config({'BLOCK_SIZE_M':128,'BLOCK_SIZE_N':128,'BLOCK_SIZE_K':128,'GROUP_SIZE_M':8},num_stages=3,num_warps=8),
        triton.Config({'BLOCK_SIZE_M':256,'BLOCK_SIZE_N':256,'BLOCK_SIZE_K':64,'GROUP_SIZE_M':8},num_stages=3,num_warps=8),
        triton.Config({'BLOCK_SIZE_M':256,'BLOCK_SIZE_N':256,'BLOCK_SIZE_K':128,'GROUP_SIZE_M':8},num_stages=3,num_warps=8),
        triton.Config({'BLOCK_SIZE_M':256,'BLOCK_SIZE_N':256,'BLOCK_SIZE_K':256,'GROUP_SIZE_M':8},num_stages=3,num_warps=16),
        triton.Config({'BLOCK_SIZE_M':512,'BLOCK_SIZE_N':512,'BLOCK_SIZE_K':64,'GROUP_SIZE_M':8},num_stages=3,num_warps=16),
        triton.Config({'BLOCK_SIZE_M':512,'BLOCK_SIZE_N':512,'BLOCK_SIZE_K':128,'GROUP_SIZE_M':8},num_stages=3,num_warps=16),
        
        # 非对称配置
        triton.Config({'BLOCK_SIZE_M':256,'BLOCK_SIZE_N':512,'BLOCK_SIZE_K':64,'GROUP_SIZE_M':8},num_stages=3,num_warps=16),
        triton.Config({'BLOCK_SIZE_M':512,'BLOCK_SIZE_N':256,'BLOCK_SIZE_K':64,'GROUP_SIZE_M':8},num_stages=3,num_warps=16),
        
        # 不同GROUP_SIZE_M
        triton.Config({'BLOCK_SIZE_M':256,'BLOCK_SIZE_N':256,'BLOCK_SIZE_K':64,'GROUP_SIZE_M':1},num_stages=3,num_warps=8),
        triton.Config({'BLOCK_SIZE_M':256,'BLOCK_SIZE_N':256,'BLOCK_SIZE_K':64,'GROUP_SIZE_M':2},num_stages=3,num_warps=8),
        triton.Config({'BLOCK_SIZE_M':256,'BLOCK_SIZE_N':256,'BLOCK_SIZE_K':64,'GROUP_SIZE_M':4},num_stages=3,num_warps=8),
        triton.Config({'BLOCK_SIZE_M':256,'BLOCK_SIZE_N':256,'BLOCK_SIZE_K':64,'GROUP_SIZE_M':8},num_stages=3,num_warps=8),
        triton.Config({'BLOCK_SIZE_M':256,'BLOCK_SIZE_N':256,'BLOCK_SIZE_K':64,'GROUP_SIZE_M':16},num_stages=3,num_warps=8),
        triton.Config({'BLOCK_SIZE_M':256,'BLOCK_SIZE_N':256,'BLOCK_SIZE_K':64,'GROUP_SIZE_M':32},num_stages=3,num_warps=8),
        
        # 不同阶段数
        triton.Config({'BLOCK_SIZE_M':256,'BLOCK_SIZE_N':256,'BLOCK_SIZE_K':64,'GROUP_SIZE_M':8},num_stages=2,num_warps=8),
        triton.Config({'BLOCK_SIZE_M':256,'BLOCK_SIZE_N':256,'BLOCK_SIZE_K':64,'GROUP_SIZE_M':8},num_stages=3,num_warps=8),
        triton.Config({'BLOCK_SIZE_M':256,'BLOCK_SIZE_N':256,'BLOCK_SIZE_K':64,'GROUP_SIZE_M':8},num_stages=4,num_warps=8),
        triton.Config({'BLOCK_SIZE_M':256,'BLOCK_SIZE_N':256,'BLOCK_SIZE_K':64,'GROUP_SIZE_M':8},num_stages=5,num_warps=8),
        
        # 不同warp数
        triton.Config({'BLOCK_SIZE_M':256,'BLOCK_SIZE_N':256,'BLOCK_SIZE_K':64,'GROUP_SIZE_M':8},num_stages=3,num_warps=4),
        triton.Config({'BLOCK_SIZE_M':256,'BLOCK_SIZE_N':256,'BLOCK_SIZE_K':64,'GROUP_SIZE_M':8},num_stages=3,num_warps=8),
        triton.Config({'BLOCK_SIZE_M':256,'BLOCK_SIZE_N':256,'BLOCK_SIZE_K':64,'GROUP_SIZE_M':8},num_stages=3,num_warps=16),
        triton.Config({'BLOCK_SIZE_M':256,'BLOCK_SIZE_N':256,'BLOCK_SIZE_K':64,'GROUP_SIZE_M':8},num_stages=3,num_warps=32),
        
        # ==================== 超大方阵配置 (2048-4096) ====================
        # 不同BLOCK_SIZE组合
        triton.Config({'BLOCK_SIZE_M':256,'BLOCK_SIZE_N':256,'BLOCK_SIZE_K':128,'GROUP_SIZE_M':8},num_stages=3,num_warps=16),
        triton.Config({'BLOCK_SIZE_M':512,'BLOCK_SIZE_N':512,'BLOCK_SIZE_K':64,'GROUP_SIZE_M':8},num_stages=3,num_warps=16),
        triton.Config({'BLOCK_SIZE_M':512,'BLOCK_SIZE_N':512,'BLOCK_SIZE_K':128,'GROUP_SIZE_M':8},num_stages=3,num_warps=16),
        triton.Config({'BLOCK_SIZE_M':512,'BLOCK_SIZE_N':512,'BLOCK_SIZE_K':256,'GROUP_SIZE_M':8},num_stages=3,num_warps=16),
        triton.Config({'BLOCK_SIZE_M':1024,'BLOCK_SIZE_N':1024,'BLOCK_SIZE_K':64,'GROUP_SIZE_M':8},num_stages=3,num_warps=32),
        triton.Config({'BLOCK_SIZE_M':1024,'BLOCK_SIZE_N':1024,'BLOCK_SIZE_K':128,'GROUP_SIZE_M':8},num_stages=3,num_warps=32),
        
        # 非对称配置
        triton.Config({'BLOCK_SIZE_M':512,'BLOCK_SIZE_N':1024,'BLOCK_SIZE_K':64,'GROUP_SIZE_M':8},num_stages=3,num_warps=32),
        triton.Config({'BLOCK_SIZE_M':1024,'BLOCK_SIZE_N':512,'BLOCK_SIZE_K':64,'GROUP_SIZE_M':8},num_stages=3,num_warps=32),
        
        # 不同GROUP_SIZE_M
        triton.Config({'BLOCK_SIZE_M':512,'BLOCK_SIZE_N':512,'BLOCK_SIZE_K':64,'GROUP_SIZE_M':1},num_stages=3,num_warps=16),
        triton.Config({'BLOCK_SIZE_M':512,'BLOCK_SIZE_N':512,'BLOCK_SIZE_K':64,'GROUP_SIZE_M':2},num_stages=3,num_warps=16),
        triton.Config({'BLOCK_SIZE_M':512,'BLOCK_SIZE_N':512,'BLOCK_SIZE_K':64,'GROUP_SIZE_M':4},num_stages=3,num_warps=16),
        triton.Config({'BLOCK_SIZE_M':512,'BLOCK_SIZE_N':512,'BLOCK_SIZE_K':64,'GROUP_SIZE_M':8},num_stages=3,num_warps=16),
        triton.Config({'BLOCK_SIZE_M':512,'BLOCK_SIZE_N':512,'BLOCK_SIZE_K':64,'GROUP_SIZE_M':16},num_stages=3,num_warps=16),
        triton.Config({'BLOCK_SIZE_M':512,'BLOCK_SIZE_N':512,'BLOCK_SIZE_K':64,'GROUP_SIZE_M':32},num_stages=3,num_warps=16),
        
        # 不同阶段数
        triton.Config({'BLOCK_SIZE_M':512,'BLOCK_SIZE_N':512,'BLOCK_SIZE_K':64,'GROUP_SIZE_M':8},num_stages=2,num_warps=16),
        triton.Config({'BLOCK_SIZE_M':512,'BLOCK_SIZE_N':512,'BLOCK_SIZE_K':64,'GROUP_SIZE_M':8},num_stages=3,num_warps=16),
        triton.Config({'BLOCK_SIZE_M':512,'BLOCK_SIZE_N':512,'BLOCK_SIZE_K':64,'GROUP_SIZE_M':8},num_stages=4,num_warps=16),
        triton.Config({'BLOCK_SIZE_M':512,'BLOCK_SIZE_N':512,'BLOCK_SIZE_K':64,'GROUP_SIZE_M':8},num_stages=5,num_warps=16),
        
        # 不同warp数
        triton.Config({'BLOCK_SIZE_M':512,'BLOCK_SIZE_N':512,'BLOCK_SIZE_K':64,'GROUP_SIZE_M':8},num_stages=3,num_warps=8),
        triton.Config({'BLOCK_SIZE_M':512,'BLOCK_SIZE_N':512,'BLOCK_SIZE_K':64,'GROUP_SIZE_M':8},num_stages=3,num_warps=16),
        triton.Config({'BLOCK_SIZE_M':512,'BLOCK_SIZE_N':512,'BLOCK_SIZE_K':64,'GROUP_SIZE_M':8},num_stages=3,num_warps=32),
        
        # ==================== 特殊优化配置 ====================
        # 针对高K值的配置
        triton.Config({'BLOCK_SIZE_M':128,'BLOCK_SIZE_N':128,'BLOCK_SIZE_K':256,'GROUP_SIZE_M':8},num_stages=3,num_warps=8),
        triton.Config({'BLOCK_SIZE_M':256,'BLOCK_SIZE_N':256,'BLOCK_SIZE_K':512,'GROUP_SIZE_M':8},num_stages=3,num_warps=16),
        
        # 针对特定GPU架构的优化
        triton.Config({'BLOCK_SIZE_M':64,'BLOCK_SIZE_N':64,'BLOCK_SIZE_K':32,'GROUP_SIZE_M':8},num_stages=5,num_warps=2),  # 针对低端GPU
        triton.Config({'BLOCK_SIZE_M':256,'BLOCK_SIZE_N':256,'BLOCK_SIZE_K':64,'GROUP_SIZE_M':8},num_stages=4,num_warps=8),  # 针对中端GPU
        triton.Config({'BLOCK_SIZE_M':512,'BLOCK_SIZE_N':512,'BLOCK_SIZE_K':128,'GROUP_SIZE_M':8},num_stages=4,num_warps=16),  # 针对高端GPU
        
        # 针对特定矩阵形状的优化
        triton.Config({'BLOCK_SIZE_M':128,'BLOCK_SIZE_N':64,'BLOCK_SIZE_K':32,'GROUP_SIZE_M':8},num_stages=4,num_warps=4),   # 高瘦矩阵
        triton.Config({'BLOCK_SIZE_M':64,'BLOCK_SIZE_N':128,'BLOCK_SIZE_K':32,'GROUP_SIZE_M':8},num_stages=4,num_warps=4),   # 扁平矩阵
        
        # 极端配置，用于探索性能边界
        triton.Config({'BLOCK_SIZE_M':1024,'BLOCK_SIZE_N':1024,'BLOCK_SIZE_K':64,'GROUP_SIZE_M':8},num_stages=2,num_warps=32),
        triton.Config({'BLOCK_SIZE_M':1024,'BLOCK_SIZE_N':1024,'BLOCK_SIZE_K':128,'GROUP_SIZE_M':8},num_stages=2,num_warps=32),
        triton.Config({'BLOCK_SIZE_M':512,'BLOCK_SIZE_N':512,'BLOCK_SIZE_K':256,'GROUP_SIZE_M':8},num_stages=2,num_warps=32),
        
        # 针对内存访问模式的优化
        triton.Config({'BLOCK_SIZE_M':128,'BLOCK_SIZE_N':128,'BLOCK_SIZE_K':32,'GROUP_SIZE_M':8},num_stages=3,num_warps=4,enable_warp_specialization=True),
        triton.Config({'BLOCK_SIZE_M':256,'BLOCK_SIZE_N':256,'BLOCK_SIZE_K':64,'GROUP_SIZE_M':8},num_stages=4,num_warps=8,enable_warp_specialization=True),
        
        # 针对数据重用的优化
        triton.Config({'BLOCK_SIZE_M':128,'BLOCK_SIZE_N':128,'BLOCK_SIZE_K':64,'GROUP_SIZE_M':8},num_stages=3,num_warps=8,max_async_copy=2),
        triton.Config({'BLOCK_SIZE_M':256,'BLOCK_SIZE_N':256,'BLOCK_SIZE_K':64,'GROUP_SIZE_M':8},num_stages=4,num_warps=8,max_async_copy=4),
    ],
    key=['M','N','K'],
)